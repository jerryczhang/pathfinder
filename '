import numpy as np
import sys
import subprocess

class Display:

    def __init__(self, end_node):
        """Initialize the text blocks used for display, as well as the numpy array."""
        self.BLANK = "\033[40m  \033[0m"
        self.WALL = "\033[47m  \033[0m"
        self.CURR = "\033[40m[]\033[0m"
        self.START = "\033[42m  \033[0m"
        self.END = "\033[43m  \033[0m"
        self.PATH = "\033[40m::\033[0m"
        self.INVALID = "\033[40m><\033[0m"

        self.display = np.full((3, 3), self.BLANK)
        self.x_offset = 1
        self.y_offset = 1
        self.y_max = self.display.shape[0] - 1
        self.x_max = self.display.shape[1] - 1

        self.end_node = end_node

    def print_display(self):
        """Print the numpy array, which is the graphical representation of the maze."""
        subprocess.run("clear")
        for row in self.display:
            for item in row:
                sys.stdout.write(item)
            sys.stdout.write('\n')
        sys.stdout.write('\n')

    def expand(self, direction, num_tiles):
        """Expand the numpy array in a specified direction."""
        ysize, xsize = self.display.shape
        if direction == 'n':
            self.display = np.concatenate((np.full((2 * num_tiles, xsize), self.BLANK), self.display), axis=0)
            self.y_offset += 2 * num_tiles
        if direction == 'e':
            self.display = np.concatenate((self.display, np.full((ysize, 2 * num_tiles), self.BLANK)), axis=1)
        if direction == 's':
            self.display = np.concatenate((self.display, np.full((2 * num_tiles, xsize), self.BLANK)), axis=0)
        if direction == 'w':
            self.display = np.concatenate((np.full((ysize, 2 * num_tiles), self.BLANK), self.display), axis=1)
            self.x_offset += 2 * num_tiles
        self.y_max = self.display.shape[0] - 1
        self.x_max = self.display.shape[1] - 1

    def add_element(self, node, element, offset_dirs=''):
        """Add maze coordinates node to the display, offset in directions offset_dirs."""
        xcoor, ycoor = self.transform(node)
        if xcoor > self.x_max:
            num_tiles = (xcoor - self.x_max + 1) // 2
            self.expand('e', num_tiles)
        if ycoor > self.y_max:
            num_tiles = (ycoor - self.y_max + 1) // 2
            self.expand('s', num_tiles)
        if xcoor < 0:
            num_tiles = (1 - xcoor) // 2
            self.expand('w', num_tiles)
            xcoor = 1
        while ycoor < 0:
            num_tiles = (1 - ycoor) // 2
            self.expand('n', num_tiles)
            ycoor = 1
        if offset_dirs:
            if 'n' in offset_dirs:
                ycoor -= 1
            elif 's' in offset_dirs:
                ycoor += 1
            if 'e' in offset_dirs:
                xcoor += 1
            elif 'w' in offset_dirs:
                xcoor -= 1
        self.display[ycoor][xcoor] = element

    def transform(self, node):
        """Converts maze coordinates into array coordinates."""
        xtransform = 2 * node[0] + self.x_offset
        ytransform = 2 * node[1] + self.y_offset
        return xtransform, ytransform

    def update_node(self, maze, node):
        for direction in maze[node]:
            if maze[node][direction] == "invalid":
                self.add_element(node, self.WALL, direction)
        for offset_dir in ['ne', 'se', 'sw', 'nw']:
            self.add_element(node, self.WALL, offset_dir)

    def update_display(self, maze, path, invalid, curr_node=None):
        """Update the graphical array.
        
        Can update iteratively, if curr_node provided, else updates
        every node in the maze."""
        if curr_node:
            self.update_node(maze, curr_node)
        for node in maze:
            if not curr_node:
                self.update_node(maze, node)
            if node == curr_node:
                self.add_element(node, self.CURR)
            elif node == path[0]:
                self.add_element(node, self.START)
            elif node in path:
                self.add_element(node, self.PATH)
            elif node in invalid:
                self.add_element(node, self.INVALID)
            else:
                self.add_element(node, self.BLANK)
        self.add_element(self.end_node, self.END)

